[
    {
        "id": "49ef9935a0084879",
        "type": "tab",
        "label": "Cyclist 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03e7604004065379",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf2cf577a28d9373",
        "type": "ui_tab",
        "name": "Sub",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f2e47570d7e3d99e",
        "type": "ui_group",
        "name": "Home",
        "tab": "cf2cf577a28d9373",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fab7eefd92b5097f",
        "type": "ui_tab",
        "name": "Cyclist Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "09ab234bed2ce55f",
        "type": "ui_tab",
        "name": "Cyclist Dashboard",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c9285b115cb483f1",
        "type": "ui_group",
        "name": "Vitals",
        "tab": "09ab234bed2ce55f",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a6ca0cec875f7971",
        "type": "debug",
        "z": "49ef9935a0084879",
        "name": "debug-sensors-data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 100,
        "wires": []
    },
    {
        "id": "22a064db95cca791",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "d": true,
        "name": "Heart Rate (bpm)",
        "group": "c9285b115cb483f1",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Heart-rate",
        "label": "bpm",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "130",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "7201a1e144ba78fd",
        "type": "inject",
        "z": "49ef9935a0084879",
        "name": "timestamp-sensors",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "0c4ff3594b832fb1"
            ]
        ]
    },
    {
        "id": "0c4ff3594b832fb1",
        "type": "function",
        "z": "49ef9935a0084879",
        "name": "generate-sensors-data",
        "func": "// --- Persistent cyclist state ---\nlet state = flow.get('cyclistState') || {\n    latitude: 44.4000,\n    longitude: 8.9300,\n    speed: 20.0,        // km/h\n    cadence: 80.0,      // rpm\n    gearRatio: 3.0,\n    heartRate: 100.0,\n    breathingRate: 16.0,\n    stressLevel: 0.4\n};\n\n// --- Helper to apply smooth variation ---\nfunction smoothChange(value, target, maxDelta) {\n    let delta = target - value;\n    delta = Math.max(-maxDelta, Math.min(maxDelta, delta));\n    return value + delta;\n}\n\n// --- Set new targets with small random walk ---\nstate._targetSpeed = state._targetSpeed || state.speed;\nstate._targetGearRatio = state._targetGearRatio || state.gearRatio;\n\nstate._targetSpeed += (Math.random() - 0.5) * 0.5;\nstate._targetSpeed = Math.max(10, Math.min(40, state._targetSpeed));\n\n// --- Bias gear ratio toward higher at higher speeds ---\nlet desiredGear = 2 + ((state.speed - 10) / 30) * (4 - 2);\ndesiredGear = Math.max(2, Math.min(4, desiredGear));\nstate._targetGearRatio = smoothChange(state._targetGearRatio, desiredGear, 0.05);\n\n// Add small natural variation\nstate._targetGearRatio += (Math.random() - 0.5) * 0.01;\nstate._targetGearRatio = Math.max(2, Math.min(4, state._targetGearRatio));\n\n// --- Smooth update ---\nstate.speed = smoothChange(state.speed, state._targetSpeed, 0.1);\nstate.gearRatio = smoothChange(state.gearRatio, state._targetGearRatio, 0.02);\n\n// cadence based on speed + gear\nlet speed_m_min = (state.speed * 1000) / 60;\nlet targetCadence = speed_m_min / (state.gearRatio * 2.1);\ntargetCadence = Math.max(60, Math.min(110, targetCadence));\nstate.cadence = smoothChange(state.cadence, targetCadence, 1);\nstate.cadence = Math.max(60, Math.min(110, state.cadence)); // ensure limit after smooth\n\n// heart rate: scaled effort\nlet effort = 0.5 * (state.speed / 40) + 0.5 * (state.cadence / 110);\neffort = Math.min(1, effort);\nlet targetHR = 60 + effort * 80;\ntargetHR = Math.min(180, targetHR);\nstate.heartRate = smoothChange(state.heartRate, targetHR, 1);\nstate.heartRate = Math.min(180, Math.max(60, state.heartRate));\n\n// breathing rate\nlet targetBR = 12 + effort * 8;\nstate.breathingRate = smoothChange(state.breathingRate, targetBR, 0.2);\nstate.breathingRate = Math.max(12, Math.min(20, state.breathingRate));\n\n// stress level\nlet targetStress = effort;\nstate.stressLevel = smoothChange(state.stressLevel, targetStress, 0.01);\nstate.stressLevel = Math.round(state.stressLevel * 100) / 100;\nstate.stressLevel = Math.min(1, Math.max(0, state.stressLevel));\n\n// position (tiny movement)\nlet deltaLat = (Math.random() - 0.5) * 0.00002; \nlet deltaLon = (Math.random() - 0.5) * 0.00002;\nstate.latitude += deltaLat;\nstate.longitude += deltaLon;\n\n// --- Save ---\nflow.set('cyclistState', state);\n\n// --- Output ---\nmsg.payload = {\n    gps: {\n        latitude: state.latitude.toFixed(6),\n        longitude: state.longitude.toFixed(6)\n    },\n    speed: +(state.speed.toFixed(1)),\n    cadence: Math.round(state.cadence),\n    gearRatio: +(state.gearRatio.toFixed(2)),\n    heartRate: Math.round(state.heartRate),\n    breathingRate: +(state.breathingRate.toFixed(1)),\n    stressLevel: state.stressLevel\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "a6ca0cec875f7971",
                "c2e6335da047780e",
                "e4b73ed3cf9b77c5",
                "5b63754e9d5412c9",
                "c1e7ebbe5b022198",
                "52184ced46f6cdd0"
            ]
        ]
    },
    {
        "id": "c2e6335da047780e",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-heart-rate",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.heartRate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 200,
        "wires": [
            [
                "22a064db95cca791",
                "b0d330a56d92b095",
                "1462cc644e7a8637"
            ]
        ]
    },
    {
        "id": "e4b73ed3cf9b77c5",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-speed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.speed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 320,
        "wires": [
            [
                "cd52c396adb8929c",
                "5b8260e8b0b7df67"
            ]
        ]
    },
    {
        "id": "96fa74bada67238e",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "d": true,
        "name": "Cadence (rpm)",
        "group": "c9285b115cb483f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Cadence (rpm)",
        "label": "rpm",
        "format": "{{value}}",
        "min": "60",
        "max": "110",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "75",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 500,
        "wires": []
    },
    {
        "id": "5b63754e9d5412c9",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-cadence",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.cadence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 500,
        "wires": [
            [
                "96fa74bada67238e",
                "131e8b9dc0c822c3",
                "5a6b27a5a350bdfb"
            ]
        ]
    },
    {
        "id": "131e8b9dc0c822c3",
        "type": "debug",
        "z": "49ef9935a0084879",
        "name": "debug-change-cadence",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 560,
        "wires": []
    },
    {
        "id": "c1e7ebbe5b022198",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "Gear-ratio",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.gearRatio",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 620,
        "wires": [
            [
                "676796128dc22821",
                "fc6d2ce79cdd3596"
            ]
        ]
    },
    {
        "id": "cd52c396adb8929c",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "d": true,
        "name": "Speed",
        "group": "c9285b115cb483f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "80",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "35",
        "diff": false,
        "className": "",
        "x": 970,
        "y": 320,
        "wires": []
    },
    {
        "id": "676796128dc22821",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "d": true,
        "name": "Gear-ratio",
        "group": "c9285b115cb483f1",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Gear-ratio",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": 10,
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "2",
        "seg2": "4",
        "diff": false,
        "className": "",
        "x": 980,
        "y": 620,
        "wires": []
    },
    {
        "id": "52184ced46f6cdd0",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "Breathing-rate",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.breathingRate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 740,
        "wires": [
            [
                "e30b3bfaa824227e",
                "edc0946c36782a00"
            ]
        ]
    },
    {
        "id": "e30b3bfaa824227e",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "d": true,
        "name": "Breathing-rate",
        "group": "c9285b115cb483f1",
        "order": 4,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Breathing-rate",
        "label": "units",
        "format": "{{value}}",
        "min": "12",
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "16",
        "seg2": "18",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 740,
        "wires": []
    },
    {
        "id": "5a6b27a5a350bdfb",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "c9285b115cb483f1",
        "name": "Cadence",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<div id=\"cadenceGaugeContainer\"></div>\n\n<script>\n  (function(scope) {\n    const config = {\n      containerId: 'cadenceGaugeContainer',\n      labels: ['Slow', 'Optimal', 'Fast', 'Very Fast'],\n      data: [25, 40, 10, 25],\n      colors: ['#FF0000', '#00FF00', '#FFFF00', '#FF0000'],\n      title: 'Cadence (rpm)',\n      pointerColor: 'black',\n      units: ' rpm',\n      min: 0,\n      max: 150\n    };\n\n    const cadenceGauge = new MulticolorGauge(config, scope);\n\n    scope.$watch('msg.payload', function(cadence) {\n      if (typeof cadence === 'number') {\n        cadenceGauge.update(cadence);\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8260e8b0b7df67",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "c9285b115cb483f1",
        "name": "Speed",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<div id=\"speedGaugeContainer\"></div>\n\n<script>\n  (function(scope) {\n    const config = {\n      containerId: 'speedGaugeContainer',\n      labels: ['', '', '', ''],\n      data: [10, 15, 15, 20], // segments: 0-10, 10-25, 25-40, 40-50+\n      colors: ['#FF0000', '#FFFF00', '#00FF00', '#FF0000'],\n      title: 'Speed (km/h)',\n      pointerColor: 'black',\n      units: ' km/h',\n      min: 0,\n      max: 50\n    };\n\n    const speedGauge = new MulticolorGauge(config, scope);\n\n    scope.$watch('msg.payload', function(speed) {\n      if (typeof speed === 'number') {\n        speedGauge.update(speed);\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 970,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b0d330a56d92b095",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "c9285b115cb483f1",
        "name": "Heart rate",
        "order": 7,
        "width": 0,
        "height": 0,
        "format": "<div id=\"heartRateGaugeContainer\"></div>\n\n<script>\n  (function(scope) {\n    const config = {\n      containerId: 'heartRateGaugeContainer',\n      labels: ['Recovery', 'Endurance', 'Tempo', 'Threshold', 'Maximum'],\n      data: [60, 70, 130, 150],\n      colors: ['#FF0000', '#FFFF00', '#00FF00', '#FF0000'],\n      title: 'Heart Rate (bpm)',\n      pointerColor: 'black',\n      units: ' bpm',\n      min: 0, \n      max: 190 \n    };\n\n    const heartRateGauge = new MulticolorGauge(config, scope);\n\n    scope.$watch('msg.payload', function(heartRate) {\n      if (typeof heartRate === 'number') {\n        heartRateGauge.update(heartRate);\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "edc0946c36782a00",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "c9285b115cb483f1",
        "name": "Breating-rate",
        "order": 8,
        "width": 0,
        "height": 0,
        "format": "<div id=\"breathingRateGaugeContainer\"></div>\n\n<script>\n    (function(scope) {\n    const config = {\n      containerId: 'breathingRateGaugeContainer',\n      labels: ['Recovery', 'Endurance', 'Tempo', 'Threshold', 'Maximum'],\n      data: [20, 30, 40, 50],\n      colors: ['#00FF00', '#FFFF00', '#FFA500', '#FF0000'], // green, yellow, orange, red\n      title: 'Breathing Rate (bpm)',\n      pointerColor: 'black',\n      units: ' bpm',\n      min: 0,\n      max: 60\n    };\n\n    const breathingRateGauge = new MulticolorGauge(config, scope);\n\n    scope.$watch('msg.payload', function(breathingRate) {\n      if (typeof breathingRate === 'number') {\n        breathingRateGauge.update(breathingRate);\n      }\n    });\n  })(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 990,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "fc6d2ce79cdd3596",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "c9285b115cb483f1",
        "name": "Gear-ratio",
        "order": 9,
        "width": 0,
        "height": 0,
        "format": "<div id=\"gearRatioGaugeContainer\"></div>\n\n<script>\n  (function(scope) {\n    const config = {\n      containerId: 'gearRatioGaugeContainer',\n      labels: ['Low', 'Moderate', 'High'],\n      data: [2.0, 3.0],\n      colors: ['#00FF00', '#FFFF00', '#FF0000'], // green: low, yellow: moderate, red: high\n      title: 'Gear Ratio',\n      pointerColor: 'black',\n      units: '',\n      min: 1.0,\n      max: 5.0\n    };\n\n    const gearRatioGauge = new MulticolorGauge(config, scope);\n\n    scope.$watch('msg.payload', function(gearRatio) {\n      if (typeof gearRatio === 'number') {\n        gearRatioGauge.update(gearRatio);\n      }\n    });\n  })(scope);\n</script>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "77dfad5181343908",
        "type": "ui_template",
        "z": "49ef9935a0084879",
        "group": "",
        "name": "gauge-header",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script src=\"/MulticolorGauge.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "1462cc644e7a8637",
        "type": "ui_chart",
        "z": "49ef9935a0084879",
        "name": "Hear-rate chart",
        "group": "c9285b115cb483f1",
        "order": 11,
        "width": 0,
        "height": 0,
        "label": "Hear-rate chart",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "200",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#f66151",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1000,
        "y": 140,
        "wires": [
            []
        ]
    }
]