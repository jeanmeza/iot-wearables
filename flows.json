[
    {
        "id": "49ef9935a0084879",
        "type": "tab",
        "label": "Cyclist 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "03e7604004065379",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf2cf577a28d9373",
        "type": "ui_tab",
        "name": "Sub",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f2e47570d7e3d99e",
        "type": "ui_group",
        "name": "Home",
        "tab": "cf2cf577a28d9373",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fab7eefd92b5097f",
        "type": "ui_tab",
        "name": "Cyclist Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "09ab234bed2ce55f",
        "type": "ui_tab",
        "name": "Cyclist Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c9285b115cb483f1",
        "type": "ui_group",
        "name": "Vitals",
        "tab": "09ab234bed2ce55f",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a6ca0cec875f7971",
        "type": "debug",
        "z": "49ef9935a0084879",
        "name": "debug-sensors-data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 200,
        "wires": []
    },
    {
        "id": "22a064db95cca791",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "name": "Heart Rate (bpm)",
        "group": "c9285b115cb483f1",
        "order": 0,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Heart-rate",
        "label": "bpm",
        "format": "{{value}}",
        "min": "50",
        "max": "200",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "100",
        "seg2": "130",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 260,
        "wires": []
    },
    {
        "id": "7201a1e144ba78fd",
        "type": "inject",
        "z": "49ef9935a0084879",
        "name": "timestamp-sensors",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "object",
        "payloadType": "date",
        "x": 240,
        "y": 260,
        "wires": [
            [
                "0c4ff3594b832fb1"
            ]
        ]
    },
    {
        "id": "0c4ff3594b832fb1",
        "type": "function",
        "z": "49ef9935a0084879",
        "name": "generate-sensors-data",
        "func": "// --- Persistent cyclist state ---\nlet state = flow.get('cyclistState') || {\n    latitude: 44.4000,\n    longitude: 8.9300,\n    speed: 20.0,        // km/h\n    cadence: 80.0,      // rpm\n    gearRatio: 3.0,\n    heartRate: 100.0,\n    breathingRate: 16.0,\n    stressLevel: 0.4\n};\n\n// --- Helper to apply smooth variation ---\nfunction smoothChange(value, target, maxDelta) {\n    let delta = target - value;\n    delta = Math.max(-maxDelta, Math.min(maxDelta, delta));\n    return value + delta;\n}\n\n// --- Set new targets with small random walk ---\nstate._targetSpeed = state._targetSpeed || state.speed;\nstate._targetGearRatio = state._targetGearRatio || state.gearRatio;\n\nstate._targetSpeed += (Math.random() - 0.5) * 0.5;\nstate._targetSpeed = Math.max(10, Math.min(40, state._targetSpeed));\n\n// --- Bias gear ratio toward higher at higher speeds ---\nlet desiredGear = 2 + ((state.speed - 10) / 30) * (4 - 2);\ndesiredGear = Math.max(2, Math.min(4, desiredGear));\nstate._targetGearRatio = smoothChange(state._targetGearRatio, desiredGear, 0.05);\n\n// Add small natural variation\nstate._targetGearRatio += (Math.random() - 0.5) * 0.01;\nstate._targetGearRatio = Math.max(2, Math.min(4, state._targetGearRatio));\n\n// --- Smooth update ---\nstate.speed = smoothChange(state.speed, state._targetSpeed, 0.1);\nstate.gearRatio = smoothChange(state.gearRatio, state._targetGearRatio, 0.02);\n\n// cadence based on speed + gear\nlet speed_m_min = (state.speed * 1000) / 60;\nlet targetCadence = speed_m_min / (state.gearRatio * 2.1);\ntargetCadence = Math.max(60, Math.min(110, targetCadence));\nstate.cadence = smoothChange(state.cadence, targetCadence, 1);\nstate.cadence = Math.max(60, Math.min(110, state.cadence)); // ensure limit after smooth\n\n// heart rate: scaled effort\nlet effort = 0.5 * (state.speed / 40) + 0.5 * (state.cadence / 110);\neffort = Math.min(1, effort);\nlet targetHR = 60 + effort * 80;\ntargetHR = Math.min(180, targetHR);\nstate.heartRate = smoothChange(state.heartRate, targetHR, 1);\nstate.heartRate = Math.min(180, Math.max(60, state.heartRate));\n\n// breathing rate\nlet targetBR = 12 + effort * 8;\nstate.breathingRate = smoothChange(state.breathingRate, targetBR, 0.2);\nstate.breathingRate = Math.max(12, Math.min(20, state.breathingRate));\n\n// stress level\nlet targetStress = effort;\nstate.stressLevel = smoothChange(state.stressLevel, targetStress, 0.01);\nstate.stressLevel = Math.round(state.stressLevel * 100) / 100;\nstate.stressLevel = Math.min(1, Math.max(0, state.stressLevel));\n\n// position (tiny movement)\nlet deltaLat = (Math.random() - 0.5) * 0.00002; \nlet deltaLon = (Math.random() - 0.5) * 0.00002;\nstate.latitude += deltaLat;\nstate.longitude += deltaLon;\n\n// --- Save ---\nflow.set('cyclistState', state);\n\n// --- Output ---\nmsg.payload = {\n    gps: {\n        latitude: state.latitude.toFixed(6),\n        longitude: state.longitude.toFixed(6)\n    },\n    speed: +(state.speed.toFixed(1)),\n    cadence: Math.round(state.cadence),\n    gearRatio: +(state.gearRatio.toFixed(2)),\n    heartRate: Math.round(state.heartRate),\n    breathingRate: +(state.breathingRate.toFixed(1)),\n    stressLevel: state.stressLevel\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "a6ca0cec875f7971",
                "c2e6335da047780e",
                "e4b73ed3cf9b77c5",
                "5b63754e9d5412c9",
                "c1e7ebbe5b022198"
            ]
        ]
    },
    {
        "id": "c2e6335da047780e",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-heart-rate",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.heartRate",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 260,
        "wires": [
            [
                "22a064db95cca791"
            ]
        ]
    },
    {
        "id": "e4b73ed3cf9b77c5",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-speed",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.speed",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 760,
        "y": 320,
        "wires": [
            [
                "cd52c396adb8929c"
            ]
        ]
    },
    {
        "id": "96fa74bada67238e",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "name": "Cadence (rpm)",
        "group": "c9285b115cb483f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Cadence (rpm)",
        "label": "rpm",
        "format": "{{value}}",
        "min": "60",
        "max": "110",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "75",
        "seg2": "90",
        "diff": false,
        "className": "",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "5b63754e9d5412c9",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "change-cadence",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.cadence",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 770,
        "y": 380,
        "wires": [
            [
                "96fa74bada67238e",
                "131e8b9dc0c822c3"
            ]
        ]
    },
    {
        "id": "131e8b9dc0c822c3",
        "type": "debug",
        "z": "49ef9935a0084879",
        "name": "debug-change-cadence",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 440,
        "wires": []
    },
    {
        "id": "c1e7ebbe5b022198",
        "type": "change",
        "z": "49ef9935a0084879",
        "name": "Gear-ratio",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.gearRatio",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "cd52c396adb8929c",
        "type": "ui_gauge",
        "z": "49ef9935a0084879",
        "name": "Speed",
        "group": "c9285b115cb483f1",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Speed",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "80",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "20",
        "seg2": "35",
        "diff": false,
        "className": "",
        "x": 970,
        "y": 320,
        "wires": []
    }
]